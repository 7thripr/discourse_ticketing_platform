{"ast":null,"code":"import * as common from \"../assets/common.js\";\nimport FileUpload from \"./FileUpload.vue\";\nimport Tagging from \"./Tagging.vue\";\nexport default {\n  name: \"TicketForm\",\n  components: {\n    Tagging,\n    FileUpload\n  },\n  data() {\n    return {\n      selected: null,\n      sortby: null,\n      sortdir: null,\n      sort_by_options: [{\n        value: 'created_on',\n        text: \"Created Date\"\n      }, {\n        value: \"resolved_on\",\n        text: \"Resolved Date\"\n      }, {\n        value: \"votes\",\n        text: \"Votes\"\n      }],\n      sort_dir_options: [{\n        value: 'asc',\n        text: \"Ascending\"\n      }, {\n        value: \"desc\",\n        text: \"Descending\"\n      }],\n      form: {\n        query: \"\",\n        sort: [],\n        filter: []\n      },\n      show: true\n    };\n  },\n  methods: {\n    onFileUpload(value) {\n      this.form.attachments.splice(0, this.form.attachments.length, ...value);\n      for (let i = 0; i < this.form.attachments.length; i++) {\n        console.log(i, this.form.attachments[i].attachment_loc.slice(0, 50));\n      }\n    },\n    onSubmit(event) {\n      if (event && event.preventDefault) {\n        event.preventDefault();\n      }\n      if (this.form.tags.length == 0) {\n        alert(\"Choose atleast 1 tag\");\n      } else {\n        alert('You are creating a new ticket. Click \"Ok\" to proceed?');\n        this.$log.info(\"Submitting ticket form\");\n        for (let i in this.form.tags) {\n          if (this.form.tags[i]) {\n            this.form[`tag_${parseInt(i) + 1}`] = this.form.tags[i];\n          }\n        }\n        // console.log(JSON.stringify(this.form));\n\n        // console.log(this.$refs);\n\n        fetch(common.TICKET_API + `/${this.$store.getters.get_user_id}`, {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            web_token: this.$store.getters.get_web_token,\n            user_id: this.$store.getters.get_user_id\n          },\n          body: JSON.stringify(this.form)\n        }).then(response => response.json()).then(data => {\n          this.$log.debug(`Success : ${data}`);\n          if (data.category == \"success\") {\n            this.flashMessage.success({\n              message: data.message\n            });\n            this.onReset();\n          }\n          if (data.category == \"error\") {\n            this.flashMessage.error({\n              message: data.message\n            });\n          }\n        }).catch(error => {\n          this.$log.debug(`Error : ${error}`);\n          this.flashMessage.error({\n            message: \"Internal Server Error\"\n          });\n        });\n      }\n    },\n    onReset(event) {\n      if (event && event.preventDefault) {\n        event.preventDefault();\n      }\n\n      // event.preventDefault();\n      this.form.title = \"\";\n      this.form.description = \"\";\n      this.form.attachments = [];\n      // this.$refs[\"file-input\"].reset();\n      // Trick to reset/clear native browser form validation state\n      this.show = false;\n      this.$nextTick(() => {\n        this.show = true;\n      });\n    },\n    onTagsChanged(value) {\n      this.form.tags = value;\n    }\n  },\n  computed: {\n    check_query() {\n      return this.form.query.length > 0 ? true : false;\n    }\n  }\n};","map":{"version":3,"names":["common","FileUpload","Tagging","name","components","data","selected","sortby","sortdir","sort_by_options","value","text","sort_dir_options","form","query","sort","filter","show","methods","onFileUpload","attachments","splice","length","i","console","log","attachment_loc","slice","onSubmit","event","preventDefault","tags","alert","$log","info","parseInt","fetch","TICKET_API","$store","getters","get_user_id","method","headers","web_token","get_web_token","user_id","body","JSON","stringify","then","response","json","debug","category","flashMessage","success","message","onReset","error","catch","title","description","$nextTick","onTagsChanged","computed","check_query"],"sources":["src/components/SearchTicket.vue"],"sourcesContent":["<template>\r\n  <div\r\n    class=\"search-ticket-form\"\r\n    style=\"margin-top: 5px; margin-left: 5px; margin-right: 5px; text-align: left\"\r\n  >\r\n    <b-form @submit=\"onSubmit\" @reset=\"onReset\" v-if=\"show\">\r\n      <b-form-group\r\n        ><b-form-input\r\n          id=\"input-query\"\r\n          v-model=\"form.query\"\r\n          type=\"text\"\r\n          placeholder=\"Enter search query\"\r\n          :state=\"check_query\"\r\n          aria-describedby=\"input-live-feedback-query\"\r\n          required\r\n        ></b-form-input>\r\n        <b-form-invalid-feedback id=\"input-live-feedback-query\">\r\n          Query should be atleast 1 characters long.\r\n        </b-form-invalid-feedback>\r\n      </b-form-group>\r\n\r\n      <b-form-group id=\"input-sort\" label=\"Sort By: \" label-for=\"input-sort\">\r\n        <b-form-select id=\"input-sort\" v-model=\"sortby\" :options=\"sort_by_options\"></b-form-select>\r\n      </b-form-group>\r\n\r\n      <b-form-group id=\"input-sort-dir\" label=\"Sort Direction: \" label-for=\"input-sort-dir\">\r\n        <b-form-select id=\"input-sort-dir\" v-model=\"sortdir\" :options=\"sort_dir_options\"></b-form-select>\r\n      </b-form-group>\r\n\r\n      <br />\r\n\r\n      <br />\r\n      <b-button style=\"margin: 10px\" type=\"submit\" variant=\"primary\">Submit</b-button>\r\n      <b-button style=\"margin: 10px\" type=\"reset\" variant=\"danger\">Reset</b-button>\r\n    </b-form>\r\n    <br />\r\n    <!-- show results here -->\r\n\r\n    <!-- <b-card class=\"mt-3\" header=\"Form Data : Temporary\">\r\n      <pre class=\"m-0\">{{ form }}</pre>\r\n    </b-card> -->\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport * as common from \"../assets/common.js\";\r\nimport FileUpload from \"./FileUpload.vue\";\r\nimport Tagging from \"./Tagging.vue\";\r\n\r\nexport default {\r\n  name: \"TicketForm\",\r\n  components: { Tagging, FileUpload },\r\n  data() {\r\n    return {\r\n      selected: null,\r\n      sortby: null,\r\n      sortdir: null,\r\n      sort_by_options: [\r\n        { value: 'created_on', text: \"Created Date\" },\r\n        { value: \"resolved_on\", text: \"Resolved Date\" },\r\n        { value: \"votes\", text: \"Votes\" },\r\n      ],\r\n      sort_dir_options: [\r\n        { value: 'asc', text: \"Ascending\" },\r\n        { value: \"desc\", text: \"Descending\" },\r\n      ],\r\n      form: {\r\n        query: \"\",\r\n        sort: [],\r\n        filter: [],\r\n      },\r\n      show: true,\r\n    };\r\n  },\r\n  methods: {\r\n    onFileUpload(value) {\r\n      this.form.attachments.splice(0, this.form.attachments.length, ...value);\r\n      for (let i = 0; i < this.form.attachments.length; i++) {\r\n        console.log(i, this.form.attachments[i].attachment_loc.slice(0, 50));\r\n      }\r\n    },\r\n    onSubmit(event) {\r\n      if (event && event.preventDefault) {\r\n        event.preventDefault();\r\n      }\r\n\r\n      if (this.form.tags.length == 0) {\r\n        alert(\"Choose atleast 1 tag\");\r\n      } else {\r\n        alert('You are creating a new ticket. Click \"Ok\" to proceed?');\r\n        this.$log.info(\"Submitting ticket form\");\r\n\r\n        for (let i in this.form.tags) {\r\n          if (this.form.tags[i]) {\r\n            this.form[`tag_${parseInt(i) + 1}`] = this.form.tags[i];\r\n          }\r\n        }\r\n        // console.log(JSON.stringify(this.form));\r\n\r\n        // console.log(this.$refs);\r\n\r\n        fetch(common.TICKET_API + `/${this.$store.getters.get_user_id}`, {\r\n          method: \"POST\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            web_token: this.$store.getters.get_web_token,\r\n            user_id: this.$store.getters.get_user_id,\r\n          },\r\n          body: JSON.stringify(this.form),\r\n        })\r\n          .then((response) => response.json())\r\n          .then((data) => {\r\n            this.$log.debug(`Success : ${data}`);\r\n            if (data.category == \"success\") {\r\n              this.flashMessage.success({\r\n                message: data.message,\r\n              });\r\n              this.onReset();\r\n            }\r\n            if (data.category == \"error\") {\r\n              this.flashMessage.error({\r\n                message: data.message,\r\n              });\r\n            }\r\n          })\r\n          .catch((error) => {\r\n            this.$log.debug(`Error : ${error}`);\r\n            this.flashMessage.error({\r\n              message: \"Internal Server Error\",\r\n            });\r\n          });\r\n      }\r\n    },\r\n    onReset(event) {\r\n      if (event && event.preventDefault) {\r\n        event.preventDefault();\r\n      }\r\n\r\n      // event.preventDefault();\r\n      this.form.title = \"\";\r\n      this.form.description = \"\";\r\n      this.form.attachments = [];\r\n      // this.$refs[\"file-input\"].reset();\r\n      // Trick to reset/clear native browser form validation state\r\n      this.show = false;\r\n      this.$nextTick(() => {\r\n        this.show = true;\r\n      });\r\n    },\r\n    onTagsChanged(value) {\r\n      this.form.tags = value;\r\n    },\r\n  },\r\n  computed: {\r\n    check_query() {\r\n      return this.form.query.length > 0 ? true : false;\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style></style>\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}